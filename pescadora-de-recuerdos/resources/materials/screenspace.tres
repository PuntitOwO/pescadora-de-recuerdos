[gd_resource type="ShaderMaterial" load_steps=4 format=2]

[sub_resource type="VisualShaderNodeTextureUniform" id=1]
uniform_name = "Texture"

[sub_resource type="VisualShaderNodeInput" id=2]
output_port_for_preview = 0
input_name = "screen_uv"

[sub_resource type="VisualShader" id=3]
code = "shader_type canvas_item;
render_mode unshaded;

uniform sampler2D Texture;



void vertex() {
// Output:0

}

void fragment() {
// Input:3
	vec3 n_out3p0 = vec3(SCREEN_UV, 0.0);

// TextureUniform:2
	vec3 n_out2p0;
	float n_out2p1;
	{
		vec4 n_tex_read = texture(Texture, n_out3p0.xy);
		n_out2p0 = n_tex_read.rgb;
		n_out2p1 = n_tex_read.a;
	}

// Output:0
	COLOR.rgb = n_out2p0;
	COLOR.a = n_out2p1;

}

void light() {
// Output:0

}
"
mode = 1
flags/light_only = false
flags/unshaded = true
nodes/fragment/2/node = SubResource( 1 )
nodes/fragment/2/position = Vector2( -40, 140 )
nodes/fragment/3/node = SubResource( 2 )
nodes/fragment/3/position = Vector2( -320, 240 )
nodes/fragment/connections = PoolIntArray( 3, 0, 2, 0, 2, 0, 0, 0, 2, 1, 0, 1 )

[resource]
shader = SubResource( 3 )
